"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const testing_1 = require("@angular-devkit/schematics/testing");
const test_1 = require("@schematics/angular/utility/test");
const path = require("path");
const app_1 = require("../utils/app");
const testing_2 = require("../utils/testing");
const collectionPath = path.join(__dirname, '../collection.json');
describe('bootstrap-shell-schematic', () => {
    let runner;
    let appTree;
    let tree;
    beforeEach(() => {
        runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    });
    describe(`when the style file default extension for application equals 'css'`, () => {
        beforeEach(() => {
            appTree = testing_2.baseApp({ directory: '', name: 'app', style: 'css' });
        });
        describe(`and bootstrap v4 is selected`, () => {
            beforeEach(() => {
                tree = runner.runSchematic('ng-add', { version: '4' }, appTree);
            });
            it('should update package.json', () => {
                const packageJson = JSON.parse(test_1.getFileContent(tree, '/package.json'));
                expect(packageJson.dependencies['bootstrap']).toBeDefined();
                expect(packageJson.dependencies['ngx-bootstrap']).toBeDefined();
            });
            it('should update the app styles configuration', () => {
                const clientApp = app_1.getAppByIndexOrName(tree, '0');
                expect(clientApp.styles).toContain('../node_modules/bootstrap/dist/css/bootstrap.min.css');
            });
        });
        describe(`and bootstrap v3 is selected`, () => {
            beforeEach(() => {
                tree = runner.runSchematic('ng-add', { version: '3' }, appTree);
            });
            it('should update package.json', () => {
                const packageJson = JSON.parse(test_1.getFileContent(tree, '/package.json'));
                expect(packageJson.dependencies['bootstrap']).toBeDefined();
                expect(packageJson.dependencies['ngx-bootstrap']).toBeDefined();
            });
            it('should update the app styles configuration', () => {
                const clientApp = app_1.getAppByIndexOrName(tree, '0');
                expect(clientApp.styles).toContain('../node_modules/bootstrap/dist/css/bootstrap.min.css');
            });
        });
    });
    describe(`when the style file default extension for application equals 'scss'`, () => {
        beforeEach(() => {
            appTree = testing_2.baseApp({ directory: '', name: 'app', style: 'scss' });
        });
        describe(`and bootstrap v4 is selected`, () => {
            beforeEach(() => {
                tree = runner.runSchematic('ng-add', { version: '4' }, appTree);
            });
            it('should update package.json', () => {
                const packageJson = JSON.parse(test_1.getFileContent(tree, '/package.json'));
                expect(packageJson.dependencies['bootstrap']).toBeDefined();
                expect(packageJson.dependencies['ngx-bootstrap']).toBeDefined();
            });
            it('should update styles.scss', () => {
                const app = app_1.getAppByIndexOrName(tree, '0');
                const stylesPath = core_1.normalize(`/${app.root}/styles.scss`);
                const buffer = tree.read(stylesPath);
                const src = buffer.toString();
                expect(src).toContain(`@import 'variables';`);
                expect(src).toContain(`@import '../node_modules/bootstrap/scss/bootstrap'`);
            });
            it('should add _variables.scss', () => {
                const app = app_1.getAppByIndexOrName(tree, '0');
                const stylesPath = core_1.normalize(`/${app.root}/_variables.scss`);
                expect(tree.files).toContain(stylesPath);
            });
        });
        describe(`and bootstrap v3 is selected`, () => {
            beforeEach(() => {
                appTree = testing_2.baseApp({ directory: '', name: 'app', style: 'scss' });
                tree = runner.runSchematic('ng-add', { version: '3' }, appTree);
            });
            it('should update package.json', () => {
                const packageJson = JSON.parse(test_1.getFileContent(tree, '/package.json'));
                expect(packageJson.dependencies['bootstrap-sass']).toBeDefined();
                expect(packageJson.dependencies['ngx-bootstrap']).toBeDefined();
            });
            it('should update styles.scss', () => {
                const app = app_1.getAppByIndexOrName(tree, '0');
                const stylesPath = core_1.normalize(`/${app.root}/styles.scss`);
                const buffer = tree.read(stylesPath);
                const src = buffer.toString();
                expect(src).toContain(`@import 'variables';`);
                expect(src).toContain(`@import '../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap';`);
            });
            it('should add _variables.scss', () => {
                const app = app_1.getAppByIndexOrName(tree, '0');
                const stylesPath = core_1.normalize(`/${app.root}/_variables.scss`);
                expect(tree.files).toContain(stylesPath);
            });
        });
    });
});
//# sourceMappingURL=index_spec.js.map