"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("@schematics/angular/utility/config");
const app_1 = require("../utils/app");
const lib_versions_1 = require("../utils/lib-versions");
const package_1 = require("../utils/package");
/**
 * Scaffolds the basics of a bootstrap application
 */
function default_1(options) {
    return (tree, context) => {
        options.styleext = options.styleext || app_1.getDefaults(tree).styleExt;
        return schematics_1.chain([
            addVariablesFile(options),
            addDependencies(options),
            updateConfigFile(options),
            importStyles(options),
        ])(tree, context);
    };
}
exports.default = default_1;
;
/**
 * Insert a bootstrap.min.css to .angular-cli.json file.
 */
function updateConfigFile(options) {
    return (host) => {
        if (options.styleext === 'css') {
            const config = config_1.getConfig(host);
            const app = config_1.getAppFromConfig(config, options.app || '0');
            if (app === null) {
                throw new schematics_1.SchematicsException('Client app not found.');
            }
            if (!app.styles) {
                app.styles = [];
            }
            app.styles.push('../node_modules/bootstrap/dist/css/bootstrap.min.css');
            host.overwrite('/.angular-cli.json', JSON.stringify(config, null, 2));
        }
        return host;
    };
}
/**
 * Add ngx-bootstrap, bootstrap or bootstrap-sass to package.json
 */
function addDependencies(options) {
    return (host) => {
        package_1.addPackageToPackageJson(host, 'dependencies', 'ngx-bootstrap', lib_versions_1.ngxBootstrapVersion);
        if (options.version === "4") {
            package_1.addPackageToPackageJson(host, 'dependencies', 'bootstrap', lib_versions_1.bootstrap4Version);
        }
        else {
            if (options.styleext === 'scss') {
                package_1.addPackageToPackageJson(host, 'dependencies', 'bootstrap-sass', lib_versions_1.bootstrap3SassVersion);
            }
            else {
                package_1.addPackageToPackageJson(host, 'dependencies', 'bootstrap', lib_versions_1.bootstrap3Version);
            }
        }
        return host;
    };
}
/**
 * Add a _variables.scss file.
 */
function addVariablesFile(options) {
    return (host) => {
        if (options.styleext === 'scss') {
            const app = app_1.getAppByIndexOrName(host, options.app);
            const variableFilePath = core_1.normalize(`/${app.root}/_variables.scss`);
            let content = ``;
            if (options.version === "3") {
                content = `$icon-font-path: '../node_modules/bootstrap-sass/assets/fonts/bootstrap/';`;
            }
            host.create(variableFilePath, content);
        }
        return host;
    };
}
/**
 * Add imports to style.ext file
 */
function importStyles(options) {
    return (host) => {
        if (options.styleext === 'scss') {
            const app = app_1.getAppByIndexOrName(host, options.app);
            const stylesPath = core_1.normalize(`/${app.root}/styles.scss`);
            const buffer = host.read(stylesPath);
            if (buffer === null) {
                throw new schematics_1.SchematicsException('Could not find styles.scss');
            }
            let content = buffer.toString() + "@import 'variables';\r\n";
            if (options.version === "4") {
                content = content + "@import '../node_modules/bootstrap/scss/bootstrap';\r\n";
            }
            else {
                content = content + "@import '../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap';\r\n";
            }
            host.overwrite(stylesPath, content);
        }
        return host;
    };
}
//# sourceMappingURL=index.js.map